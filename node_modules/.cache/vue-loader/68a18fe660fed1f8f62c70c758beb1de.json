{"remainingRequest":"/Users/martin_nohava/Documents/VuetifyTemplate/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/martin_nohava/Documents/VuetifyTemplate/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/martin_nohava/Documents/VuetifyTemplate/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/martin_nohava/Documents/VuetifyTemplate/src/components/MainPanel.vue?vue&type=template&id=74c5da4b&","dependencies":[{"path":"/Users/martin_nohava/Documents/VuetifyTemplate/src/components/MainPanel.vue","mtime":1604836137819},{"path":"/Users/martin_nohava/Documents/VuetifyTemplate/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/martin_nohava/Documents/VuetifyTemplate/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/Users/martin_nohava/Documents/VuetifyTemplate/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/martin_nohava/Documents/VuetifyTemplate/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}